{"remainingRequest":"/Users/natanielmarmucki/rentalbike/app/node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/Users/natanielmarmucki/rentalbike/app/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/natanielmarmucki/rentalbike/app/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/natanielmarmucki/rentalbike/app/src/components/Sidebar.vue?vue&type=template&id=7d622f5c&","dependencies":[{"path":"/Users/natanielmarmucki/rentalbike/app/src/components/Sidebar.vue","mtime":1599747438654},{"path":"/Users/natanielmarmucki/rentalbike/app/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/natanielmarmucki/rentalbike/app/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":499162500000},{"path":"/Users/natanielmarmucki/rentalbike/app/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/natanielmarmucki/rentalbike/app/node_modules/vue-loader/lib/index.js","mtime":499162500000},{"path":"/Users/natanielmarmucki/rentalbike/app/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/natanielmarmucki/rentalbike/app/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":499162500000},{"path":"/Users/natanielmarmucki/rentalbike/app/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/natanielmarmucki/rentalbike/app/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"}]}