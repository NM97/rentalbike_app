{"remainingRequest":"/Users/natanielmarmucki/rentalbike/app/node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/Users/natanielmarmucki/rentalbike/app/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/natanielmarmucki/rentalbike/app/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/natanielmarmucki/rentalbike/app/src/views/Reservation.vue?vue&type=template&id=0adad4fc&","dependencies":[{"path":"/Users/natanielmarmucki/rentalbike/app/src/views/Reservation.vue","mtime":1589560957083},{"path":"/Users/natanielmarmucki/rentalbike/app/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/natanielmarmucki/rentalbike/app/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":499162500000},{"path":"/Users/natanielmarmucki/rentalbike/app/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/natanielmarmucki/rentalbike/app/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"}]}